#!/usr/bin/env python3

# Python script for filtering traffic in nftables using country IP blocks

import argparse
import json
import logging
import os
import subprocess
import sys
import tempfile
import textwrap
import urllib.request
import urllib.error

#Temp File Header
FILE_HEADER = ('table {} {} {{\n'
               'set {} {{\n'
               'type {}\n'
               'flags interval\n'
               'auto-merge\n')

IPDENY_V4_URL= 'https://www.ipdeny.com/ipblocks/data/aggregated/{}-aggregated.zone'
IPDENY_V6_URL= 'https://www.ipdeny.com/ipv6/ipaddresses/aggregated/{}-aggregated.zone'

class GeoFilter:
    def __init__(self, args):
        self.nft = args.nft_location
        self.allow = args.allow
        self.table_family = args.table_family
        self.table_name = args.table_name
        self.interface = args.interface
        self.country_codes = [c.lower() for c in args.country]
        self.no_ipv4 = args.no_ipv4
        self.no_ipv6 = args.no_ipv6
        self.counter = args.counter
        self.verbosity = args.verbose

        self.logger = self.configure_logging()

    def configure_logging(self):
        """Configure the logger object for this class"""
        logger = logging.getLogger('GeoFilter')

        if self.verbosity > 1:
            log_level = logging.DEBUG
        elif self.verbosity == 1:
            log_level = logging.INFO
        else:
            log_level = logging.WARNING

        logger.setLevel(log_level)

        # Create a StreamHandler to log messages to the console
        sh = logging.StreamHandler()
        sh.setLevel(logging.DEBUG)

        # Log format
        formatter = logging.Formatter('%(levelname)s - %(funcName)s - %(message)s')

        sh.setFormatter(formatter)
        logger.addHandler(sh)
        return logger

    def show_subprocess_run_error(self, err):
        self.logger.error("Failed to run: {}".format(err.args))
        self.logger.error("Command exit status: {}".format(err.returncode))
        self.logger.error("Command stdout: {}".format(err.stdout))
        self.logger.error("Command stderr: {}".format(err.stderr))

    def add_table(self):
        nft_command_tmpl = "{} add table {} {}"
        nft_command = nft_command_tmpl.format(self.nft, self.table_family, self.table_name)

        self.logger.info("Adding a {} table: {}".format(self.table_family, self.table_name))
        self.logger.debug("Running command: {}".format(nft_command))
        try:
            subprocess.run(nft_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

    def set_table_as_dormant(self, is_dormant):
        if is_dormant:
            nft_dormant_command_tmpl = "{} add table {} {} {{ flags dormant; }}"
        else:
            nft_dormant_command_tmpl = "{} add table {} {}"
        nft_dormant_command = nft_dormant_command_tmpl.format(self.nft, self.table_family, self.table_name)

        self.logger.info("{} is dormant: {}".format(self.table_name, is_dormant))
        self.logger.debug("Running command: {}".format(nft_dormant_command))
        try:
            subprocess.run(nft_dormant_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

    def add_chain(self):
        policy = "drop" if self.allow else "accept"

        if self.table_family == "netdev":
            nft_command_tmpl = "{} add chain {} {} filter-chain {{ type filter hook ingress device {} priority filter - 200; policy {}; }}"
            nft_command = nft_command_tmpl.format(self.nft, self.table_family, self.table_name, self.interface, policy)
        else:
            nft_command_tmpl = "{} add chain {} {} filter-chain {{ type filter hook prerouting priority filter - 200; policy {}; }}"
            nft_command = nft_command_tmpl.format(self.nft, self.table_family, self.table_name, policy)

        self.logger.info("Adding the 'filter-chain' chain in the {} table".format(self.table_name))
        self.logger.debug("Running command: {}".format(nft_command))
        try:
            subprocess.run(nft_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

    def find_old_rules(self):
        """Get a list of all the old rules in the filter-chain and store them
        for deletion."""
        nft_list_command = "{} -j list chain {} {} filter-chain".format(self.nft, self.table_family, self.table_name)

        self.logger.info("Finding old filtering rules in the 'filter-chain' chain of the {} table".format(self.table_name))
        self.logger.debug("Running command: {}".format(nft_list_command))
        try:
            result = subprocess.run(nft_list_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

        json_result = json.loads(result.stdout.decode("utf-8"))
        self.old_rule_handles = []

        # Get the handles of all the rules in the filter-chain
        for rule in [r for r in json_result["nftables"] if "rule" in r]:
            self.old_rule_handles.append(rule["rule"]["handle"])

        self.logger.debug("Old filtering rule handles: {}".format(self.old_rule_handles))

    def delete_old_rules(self):
        """Delete the old rules in the filter-chain. This should be done after the
        new filtering rules are added so that the filtering chain doesn't remain
        without rules at any point"""
        if self.old_rule_handles:
            nft_delete_tmpl = "{} delete rule {} {} filter-chain handle {}"
            self.logger.info("Deleting old filtering rules from {}'s filter-chain".format(self.table_name))

            for handle in self.old_rule_handles:
                nft_delete_command = nft_delete_tmpl.format(self.nft, self.table_family, self.table_name, handle)
                self.logger.debug("Running command: {}".format(nft_delete_command))
                try:
                    subprocess.run(nft_delete_command.split(), capture_output=True, check=True)
                except subprocess.CalledProcessError as err:
                    self.show_subprocess_run_error(err)
                    return -1

    def add_filtering_rule(self, addr_family):
        action = "accept" if self.allow else "drop"
        filter_set_name = "filter-v4" if addr_family == "AF_INET" else "filter-v6"
        nft_protocol = "ip" if addr_family == "AF_INET" else "ip6"

        nft_command_tmpl = "{} add rule {} {} filter-chain {} saddr @{} {} {}"
        nft_command = nft_command_tmpl.format(self.nft, self.table_family, self.table_name, nft_protocol,
            filter_set_name, self.counter, action)

        self.logger.info("Adding a new filtering rule for {} addresses to {}'s filter-chain".format(filter_set_name, self.table_name))
        self.logger.debug("Running command: {}".format(nft_command))
        try:
            subprocess.run(nft_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

    def add_allow_rules(self):
        """Certain rules need to be added to the filter-chain when using allow, otherwise
           LAN traffic and protocols such as ARP won't work"""
        if self.table_family == "netdev":
            nft_allow_non_ip = "{} insert rule {} {} filter-chain meta protocol ne {{ ip, ip6 }} accept".format(
                self.nft, self.table_family, self.table_name)
            self.logger.info("Allow non-IP traffic in {}'s filter-chain".format(self.table_name))
            self.logger.debug("Running command: {}".format(nft_allow_non_ip))
            try:
                subprocess.run(nft_allow_non_ip.split(), capture_output=True, check=True)
            except subprocess.CalledProcessError as err:
                self.show_subprocess_run_error(err)
                return -1

        if self.table_family in ("ip","inet") or (self.table_family == "netdev" and not self.no_ipv4):
            if self.table_family == "netdev":
                nft_allow_private_ip = "{} insert rule {} {} filter-chain ip saddr {{ 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 }}\
                    accept".format(self.nft, self.table_family, self.table_name)
            else:
                nft_allow_private_ip = "{} insert rule {} {} filter-chain ip saddr {{ 10.0.0.0/8, 127.0.0.0/8, 172.16.0.0/12,\
                    192.168.0.0/16 }} accept".format(self.nft, self.table_family, self.table_name)
            self.logger.info("Allow private IPv4 address ranges in {}'s filter-chain".format(self.table_name))
            self.logger.debug("Running command: {}".format(nft_allow_private_ip))
            try:
                subprocess.run(nft_allow_private_ip.split(), capture_output=True, check=True)
            except subprocess.CalledProcessError as err:
                self.show_subprocess_run_error(err)
                return -1

        if self.table_family in ("ip6","inet") or (self.table_family == "netdev" and not self.no_ipv6):
            if self.table_family == "netdev":
                nft_allow_link_local_ip6 = "{} insert rule {} {} filter-chain ip6 saddr fe80::/10 accept".format(
                    self.nft, self.table_family, self.table_name)
            else:
                nft_allow_link_local_ip6 = "{} insert rule {} {} filter-chain ip6 saddr {{ ::1, fe80::/10 }} accept".format(
                    self.nft, self.table_family, self.table_name)
            self.logger.info("Allow link local IPv6 traffic in {}'s filter-chain".format(self.table_name))
            self.logger.debug("Running command: {}".format(nft_allow_link_local_ip6))
            try:
                subprocess.run(nft_allow_link_local_ip6.split(), capture_output=True, check=True)
            except subprocess.CalledProcessError as err:
                self.show_subprocess_run_error(err)
                return -1

    def does_set_exist(self, filter_set_name):
        nft_list_command = "{} -j list sets {}".format(self.nft, self.table_family)

        self.logger.info("Checking if the {} set exists in the {} table".format(filter_set_name, self.table_name))
        self.logger.debug("Running command: {}".format(nft_list_command))
        try:
            result = subprocess.run(nft_list_command.split(), capture_output=True, check=True)
        except subprocess.CalledProcessError as err:
            self.show_subprocess_run_error(err)
            return -1

        json_result = json.loads(result.stdout.decode("utf-8"))

        for nft_set in [s for s in json_result["nftables"] if "set" in s]:
            if (nft_set["set"]["name"] == filter_set_name and
                nft_set["set"]["family"] == self.table_family and
                nft_set["set"]["table"] == self.table_name):

                self.logger.info("Found set {} in {}!".format(filter_set_name, self.table_name))
                return True

        self.logger.info("Could not find set {} in {}!".format(filter_set_name, self.table_name))
        return False

    def flush_filter_set(self, filter_set_name):
        nft_command_tmpl = "{} flush set {} {} {}"

        if self.does_set_exist(filter_set_name):
            nft_command = nft_command_tmpl.format(self.nft, self.table_family, self.table_name, filter_set_name)

            self.logger.info('Flushing the {} set in the {} table'.format(filter_set_name, self.table_name))
            self.logger.debug("Running command: {}".format(nft_command))
            try:
                subprocess.run(nft_command.split(), capture_output=True, check=True)
            except subprocess.CalledProcessError as err:
                self.show_subprocess_run_error(err)
                return -1

    def update_filter_set(self, addr_family):
        if addr_family == 'AF_INET':
            ipdeny_url = IPDENY_V4_URL
            filter_set_type = "ipv4_addr"
            filter_set_name = "filter-v4"
            log_addr_family = "IPv4"
        elif addr_family == 'AF_INET6':
            ipdeny_url = IPDENY_V6_URL
            filter_set_type = "ipv6_addr"
            filter_set_name = "filter-v6"
            log_addr_family = "IPv6"

        for c in self.country_codes:
            # We need to set the table as dormant before we try to download the IP blocks, because
            # there is a possibility that ipdeny.com's IP address might be blocked by the filtering
            # rule that was added when this script was previously executed. The dormant flag is
            # removed as soon as the download is finished. By doing this, we are disabling the
            # geo-filtering as little as possible.
            self.set_table_as_dormant(True)

            self.logger.info('Downloading "{}" {} blocks'.format(c, log_addr_family))
            try:
                ip_blocks = urllib.request.urlopen(ipdeny_url.format(c))
                data = ip_blocks.read().decode('utf-8')
            except urllib.error.HTTPError as err:
                self.logger.error("Couldn't GET {}: {} {}".format(ipdeny_url.format(c), err.code, err.reason))
                continue
            finally:
                self.set_table_as_dormant(False)

            # Flush the existing filter set (if it exists)
            self.flush_filter_set(filter_set_name)

            self.logger.info('Building list of {} blocks..'.format(log_addr_family))
            filter_set_ips = ',\n'.join(data.splitlines())
            self.logger.debug("IP block list for {}: {}".format(c, filter_set_ips))
            filter_set_ips = ''.join(('elements = {\n', filter_set_ips, '\n}\n}\n}'))

            with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp:
                tmp.write(FILE_HEADER.format(self.table_family, self.table_name, filter_set_name, filter_set_type))
                tmp.write(filter_set_ips)

            nft_command = "{} -f {}".format(self.nft, tmp.name)

            self.logger.info('Adding the "{}" {} blocks to the {} set in {}'.format(c, log_addr_family, filter_set_name, self.table_name))
            self.logger.debug("Running command: {}".format(nft_command))
            try:
                subprocess.run(nft_command.split(), capture_output=True, check=True)
            except subprocess.CalledProcessError as err:
                self.show_subprocess_run_error(err)
                return -1

            os.remove(tmp.name)

        # Add the new filtering rule
        if self.add_filtering_rule(addr_family) == -1:
            self.logger.error("Failed to add the new filtering rule for the {} set".format(log_addr_family))
            sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Filter traffic in nftables using country IP blocks')

    # Version
    parser.add_argument("-v", "--verbose", help="show verbose output", action="count", default=0)
    parser.add_argument("--version", action="version", version="%(prog)s 3.0")

    nft_gfilter_group = parser.add_argument_group()
    nft_gfilter_group.add_argument("-l", "--nft-location", default="/usr/sbin/nft", metavar="LOCATION",
        help="Location of the nft binary. Default is /usr/sbin/nft")
    nft_gfilter_group.add_argument("-a", "--allow", action="store_true",
        help=textwrap.dedent("""By default, all the IPs in the filter sets will be denied and every other
                IP will be allowed to pass the filtering chain. Provide this argument to reverse this
                behaviour.""")
    )
    nft_gfilter_group.add_argument("-c", "--counter", action="store_const", const="counter", default="",
        help="Add the counter statement to the filtering rules")

    # Table info
    table_group = parser.add_argument_group(
        title="Table",
        description=textwrap.dedent("""Provide the name and the family of the table in which the set of
                    filtered addresses will be created. This script will create a new nftables table, so
                    make sure the provided table name is unique and not being used by any other table in
                    the ruleset. An 'inet' table called 'geo-filter' will be used by default""")
    )
    table_group.add_argument("-f", "--table-family", choices=["ip","ip6","inet","netdev"], default="inet",
        help="Specify the table's family. Default is inet")
    table_group.add_argument("-n", "--table-name", default="geo-filter", metavar="NAME",
        help="Specify the table's name. Default is geo-filter")

    # Netdev info
    netdev_group = parser.add_argument_group(
        title="Netdev arguments",
        description=textwrap.dedent("""If you're using a netdev table, you need to provide the name of the
                    interface which is connected to the internet because netdev tables work on a per-interface
                    basis. You can also choose to only store v4 or only store v6 addresses inside the
                    netdev table sets by providing the '-4' or '-6' arguments. Both v4 and v6 addresses are
                    stored by default""")
    )
    netdev_group.add_argument("-i", "--interface",
        help="Specify the ingress interface for the netdev table")
    netdev_addr_family_group = netdev_group.add_mutually_exclusive_group()
    netdev_addr_family_group.add_argument("--no-ipv4", action="store_true", help="Don't create a set for v4 addresses in the netdev table")
    netdev_addr_family_group.add_argument("--no-ipv6", action="store_true", help="Don't create a set for v6 addresses in the netdev table")

    # Mandatory arguments
    parser.add_argument("country", nargs='+',
        help=textwrap.dedent("""2 letter ISO-3166-1 alpha-2 country codes to block. Check
            https://www.ipdeny.com/ipblocks/ to find the list of supported countries.""")
    )

    args = parser.parse_args()

    if not os.geteuid() == 0:
        sys.exit('Need root privileges to run this script!')

    if args.table_family == "netdev" and args.interface is None:
        sys.exit("'netdev' family requires an 'interface'. Please provide an interface with --interface")

    gFilter = GeoFilter(args)

    # Ensure that the target nft table and chain exists
    if gFilter.add_table() == -1:
        sys.exit("Failed to add the target nftables table")
    if gFilter.add_chain() == -1:
        sys.exit("Failed to add the target nftables chain")

    # Store the handles of the old filtering rules
    if gFilter.find_old_rules() == -1:
        sys.exit("Failed to find the handles of the old filtering rules")

    # Start updating the filter sets!
    if args.table_family in ("ip","inet") or (args.table_family == "netdev" and not args.no_ipv4):
        gFilter.update_filter_set('AF_INET')
    if args.table_family in ("ip6","inet") or (args.table_family == "netdev" and not args.no_ipv6):
        gFilter.update_filter_set('AF_INET6')

    # If we're using --allow, need to add some extra rules
    if args.allow and gFilter.add_allow_rules() == -1:
        sys.exit("Failed to add the rules needed for --allow to work")

    # Delete the old rules
    if gFilter.delete_old_rules() == -1:
        sys.exit("Failed to delete the old filtering rules")
